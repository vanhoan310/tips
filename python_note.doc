0. References
https://www3.ntu.edu.sg/home/ehchua/programming/webprogramming/Python1_Basics.html


1. Printing
  
	my_name = 'Zed A. Shaw'
  	my_age = 35 # not a lie 
  	my_height = 74 # inches 
  	print(f"Let's talk about {my_name}.")
  	print(f"If I add {my_age}, {my_height}, and {my_weight} I get {total}.")

2. Raise error
	if size < 0:
		raise ValueError('number must be non-negative')

3. Function argument

	As soon as you have a named argument, all arguments to the right of that need to be named arguments, too.

approximate_size(size=4000, False)
File "<stdin>", line 1
SyntaxError: non-keyword arg after keyword arg

4. Data structure
a) List
	
    • Slicing a list: a = [0, 1, 2, 3], a[0:2] = [0, 1]. a[-1] = 3
    • Reference: a[0] = 8, print(a) → [8, 1, 2, 3]
    • Adding items: 
1) a += a + [1, 3] → create a new list and MEMORY concern. 
      2) a.append(4) → add single element
      3) a.extend([4, 5]) → add one (more) elements
      4) a.insert(i, 7) → insert 7 at ith position(start from 0) in list. 
      
>>> a_list = ['a', 'b', 'c']
>>> a_list.extend(['d', 'e', 'f'])
1
>>> a_list
['a', 'b', 'c', 'd', 'e', 'f']
>>> len(a_list)
2
6
>>> a_list[-1]
'f'
>>> a_list.append(['g', 'h', 'i'])
3
>>> a_list
['a', 'b', 'c', 'd', 'e', 'f', ['g', 'h', 'i']]
>>> len(a_list)
4
7
>>> a_list[-1]
['g', 'h', 'i']
      
    • Remove item from list by index: del a[0] → delete first item.
    • Remove item by value: a.remove(8) will remove first 8 from list.
    • pop(index): remove and return value.
    • if(a) return TRUE if len(a) > 0 else FALSE
b) Set
    • Create a = {1,2,3}, a = set([1, 2, 3])
    • Create empty set a = set()
    • Modify: a.add(5) take a single element and duplicate values are ignored. 
    • Update a.update({2, 4, 5})//a.update([2, 4, 5])  remove the repetition.

c) Dictionary
    • a = {1: “One”, 2: [3, 4]}, len(a) → 2, 2 in a → True, 

5. Comprehensions
    • list: [a for a in [1,2,3] if …]
    • set : {a for a in [1,2,3] if …}
6. Reference
    • a = [1,2,3], b = a, b[2] = 4, print(a) → [1,2,4]
    • a = [1,2,3], b = a, b = c, print(a) → a (not c) 
7. Function
    • Passing Arguments by Value vs. by Reference
    • Immutable arguments (such as integers, floats, strings and tuples) are passed by value. That is, a copy is cloned and passed into the function, and the original cannot be modified inside the function.
    • Mutable arguments (such as lists, dictionaries, sets and instances of classes) are passed by reference. That is, they can be modified inside the function.
8. Lambda function.
    • f2 = lambda a, b, c: a+b+c, f2(1,3,4) → 8.
    • Using lambda function in filter(), map(), reduce() and comprehension.
    • filter(func, iterable): Return an iterator yielding those items of iterable for which func(item) is True.
>>> lst = [1,2,3,4]
>>> list(filter(lambda x: x%2 == 0, lst)) → [2, 4]
>>> for item in filter(lambda x: x%2 == 0, lst): print(item) → 2, 4.
    • map(func, iterable): Apply (or Map) the function on each item of the iterable. For example,
>>> lst = [11, 22, 33, 44, 55]
>>> map(lambda x: x*x, lst)
<map object at 0x7fc46f72b908>
>>> list(map(lambda x: x*x, lst))
[121, 484, 1089, 1936, 3025]
>>> for item in map(lambda x: x*x, lst): print(item, end=' ')
121 484 1089 1936 3025.
    • reduce(func, iterable) (in module functools): Apply the function of two arguments cumulatively to the items of a sequence, from left to right, so as to reduce the sequence to a single value. For example,
>>> lst = [11, 22, 33, 44, 55]
>>> from functools import reduce
>>> reduce(lambda x,y: x+y, lst)
165    # (((11 + 22) + 33) + 44) + 55

















9. Class
    • Circle example.
      
circle.py: The circle module, which defines a Circle class.
"""
from math import pi
class Circle:    # For Python 2 use: "class Circle(object):"
    """A Circle instance models a circle with a radius"""
    def __init__(self, radius=1.0):
        """Constructor with default radius of 1.0"""
        self.radius = radius  # Create an instance variable radius
        
    def __str__(self):
        """Return a descriptive string for this instance, invoked by print() and str()"""
        return 'This is a circle with radius of %.2f' % self.radius

    def __repr__(self):
        """Return a command string that can be used to re-create this instance, invoked by repr()"""
        return 'Circle(radius=%f)' % self.radius
    
    def get_area(self):
        """Return the area of this Circle instance"""
        return self.radius * self.radius * pi

class Point:    # In Python 2, use: class Point(object):
    """A Point instance models a 2D point with x and y coordinates"""

    def __init__(self, x=0, y=0):
        """Constructor, which creates the instance variables x and y with default of (0,0)"""
        self.x = x
        self.y = y

    def __str__(self):
        """Return a descriptive string for this instance"""
        return '(%.2f, %.2f)' % (self.x, self.y)
        
    def __repr__(self):
        """Return a command string to re-create this instance"""
        return 'Point(x=%f, y=%f)' % (self.x, self.y)
        
    def __add__(self, right):
        """Override the '+' operator: create and return a new instance"""
        p = Point(self.x + right.x, self.y + right.y)
        return p

    def __mul__(self, factor):
        """Override the '*' operator: modify and return this instance"""
        self.x *= factor
        self.y *= factor
        return self

# Test
if __name__ == '__main__':
    p1 = Point()
    print(p1)      # (0.00, 0.00)
    p1.x = 5
    p1.y = 6
    print(p1)      # (5.00, 6.00)
    p2 = Point(3, 4)
    print(p2)      # (3.00, 4.00)
    print(p1 + p2) # (8.00, 10.00) Same as p1.__add__(p2)
    print(p1)      # (5.00, 6.00) No change
    print(p2 * 3)  # (9.00, 12.00) Same as p1.__mul__(p2)
    print(p2)      # (9.00, 12.00) Changed



